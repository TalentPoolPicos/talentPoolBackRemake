// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  moderator
  student
  enterprise
  teacher
}

enum SocialMediaType {
  x
  facebook
  instagram
  linkedin
  youtube
  tiktok
  github
  gitlab
  reddit
  telegram
  whatsapp
  discord
}

model User {
  id                   Int           @id @default(autoincrement())
  uuid                 String        @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  
  // Status fields
  isVerified           Boolean       @default(false) @map("is_verified")
  isActive             Boolean       @default(false) @map("is_active")
  isDeleted            Boolean       @default(false) @map("is_deleted")
  isComplete           Boolean       @default(false) @map("is_complete")
  
  // Authentication fields
  username             String        @unique @db.VarChar(100)
  email                String        @unique
  password             String
  role                 Role          @default(student)
  
  // Profile fields
  name                 String?       @db.VarChar(100)
  description          String?       @db.VarChar(255)
  profilePictureUuid   String?       @map("profile_picture_uuid")
  profilePicture       String?       @map("profile_picture")
  bannerPictureUuid    String?       @map("banner_picture_uuid")
  bannerPicture        String?       @map("banner_picture")
  
  // Relations
  student              Student?
  enterprise           Enterprise?
  socialMedia          SocialMedia[]
  tags                 Tag[]
  address              Address?
  initiatedLikes       Like[]        @relation("LikeInitiator")
  receivedLikes        Like[]        @relation("LikeReceiver")
  
  // Constraints to ensure role consistency
  @@index([role])
  @@map("users")
}

model Student {
  id                   Int       @id @default(autoincrement())
  uuid                 String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  
  // Student-specific fields
  birthDate            DateTime? @map("birth_date")
  course               String?   @db.VarChar(100)
  registrationNumber   String?   @unique @db.VarChar(11) @map("registration_number")
  
  // Academic documents
  curriculum           String?
  curriculumUuid       String?   @map("curriculum_uuid")
  history              String?
  historyUuid          String?   @map("history_uuid")
  lattes               String?   @db.VarChar(255)
  
  // User relation
  userId               Int       @unique @map("user_id")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([course])
  @@map("students")
}

model Enterprise {
  id                   Int       @id @default(autoincrement())
  uuid                 String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  
  // Enterprise-specific fields
  fantasyName          String?   @db.VarChar(100) @map("fantasy_name")
  cnpj                 String?   @unique @db.VarChar(18)
  socialReason         String?   @db.VarChar(100) @map("social_reason")
  
  // User relation
  userId               Int       @unique @map("user_id")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([cnpj])
  @@map("enterprises")
}

model SocialMedia {
  id        Int               @id @default(autoincrement())
  uuid      String            @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  
  type      SocialMediaType
  url       String            @db.VarChar(255)
  
  userId    Int               @map("user_id")
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("social_media")
}

model Tag {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  label     String   @db.VarChar(40)
  
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("tags")
}

model Address {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  zipCode      String   @db.VarChar(10) @map("zip_code")
  street       String?  @db.VarChar(100)
  neighborhood String?  @db.VarChar(100)
  city         String?  @db.VarChar(100)
  state        String?  @db.VarChar(100)
  
  userId       Int      @unique @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("addresses")
}

model Like {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  initiatorId Int      @map("initiator_id")
  receiverId  Int      @map("receiver_id")
  
  initiator   User     @relation("LikeInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User     @relation("LikeReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  // Prevent self-likes and duplicate likes
  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
  @@map("likes")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  moderator
  student
  enterprise
  teacher
}

enum SocialMediaType {
  x
  facebook
  instagram
  linkedin
  youtube
  tiktok
  github
  gitlab
  reddit
  telegram
  whatsapp
  discord
}

enum AttachmentType {
  profile_picture
  banner_picture
  curriculum
  history
  document
  image
  video
  audio
  other
}

model Attachment {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // File metadata
  filename     String         @db.VarChar(255)
  originalName String         @map("original_name") @db.VarChar(255)
  mimeType     String         @map("mime_type") @db.VarChar(100)
  size         Int // Size in bytes
  type         AttachmentType

  // File storage info
  storageKey String @unique @map("storage_key") @db.VarChar(500) // MinIO/S3 key

  // Relations for User avatar and banner
  avatarUserId Int? @unique @map("avatar_user_id")
  bannerUserId Int? @unique @map("banner_user_id")

  // Relation for Student curriculum (one-to-one)
  curriculumStudentId Int? @unique @map("curriculum_student_id")

  // Relation for Student history (one-to-one)
  historyStudentId Int? @unique @map("history_student_id")

  avatarUser        User?    @relation("UserAvatar", fields: [avatarUserId], references: [id], onDelete: Cascade)
  bannerUser        User?    @relation("UserBanner", fields: [bannerUserId], references: [id], onDelete: Cascade)
  curriculumStudent Student? @relation("StudentCurriculum", fields: [curriculumStudentId], references: [id], onDelete: Cascade)
  historyStudent    Student? @relation("StudentHistory", fields: [historyStudentId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([avatarUserId])
  @@index([bannerUserId])
  @@index([curriculumStudentId])
  @@index([historyStudentId])
  @@index([type])
  @@index([storageKey])
  @@map("attachments")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Status fields
  isVerified Boolean @default(false) @map("is_verified")
  isActive   Boolean @default(false) @map("is_active")
  isDeleted  Boolean @default(false) @map("is_deleted")
  isComplete Boolean @default(false) @map("is_complete")

  // Authentication fields
  username String @unique @db.VarChar(100)
  email    String @unique
  password String
  role     Role   @default(student)

  // Profile fields
  name        String?   @db.VarChar(100)
  description String?   @db.VarChar(255)
  birthDate   DateTime? @map("birth_date")

  // Relations
  student        Student?
  enterprise     Enterprise?
  socialMedia    SocialMedia[]
  tags           Tag[]
  address        Address?
  avatar         Attachment?   @relation("UserAvatar")
  banner         Attachment?   @relation("UserBanner")
  initiatedLikes Like[]        @relation("LikeInitiator")
  receivedLikes  Like[]        @relation("LikeReceiver")

  // Constraints to ensure role consistency
  @@index([role])
  @@map("users")
}

model Student {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Student-specific fields
  course             String? @db.VarChar(100)
  registrationNumber String? @unique @map("registration_number") @db.VarChar(11)
  lattes             String? @db.VarChar(255)

  // Relations
  userId     Int         @unique @map("user_id")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  curriculum Attachment? @relation("StudentCurriculum")
  history    Attachment? @relation("StudentHistory")

  @@index([course])
  @@map("students")
}

model Enterprise {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Enterprise-specific fields
  fantasyName  String? @map("fantasy_name") @db.VarChar(100)
  cnpj         String? @unique @db.VarChar(18)
  socialReason String? @map("social_reason") @db.VarChar(100)

  // Relations
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cnpj])
  @@map("enterprises")
}

model SocialMedia {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type SocialMediaType
  url  String          @db.VarChar(255)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_media")
}

model Tag {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  label String @db.VarChar(40)

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tags")
}

model Address {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  zipCode      String  @map("zip_code") @db.VarChar(10)
  street       String? @db.VarChar(100)
  neighborhood String? @db.VarChar(100)
  city         String? @db.VarChar(100)
  state        String? @db.VarChar(100)

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Like {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  initiatorId Int @map("initiator_id")
  receiverId  Int @map("receiver_id")

  initiator User @relation("LikeInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver  User @relation("LikeReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  // Prevent self-likes and duplicate likes
  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
  @@map("likes")
}
